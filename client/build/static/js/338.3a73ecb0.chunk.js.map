{"version":3,"file":"static/js/338.3a73ecb0.chunk.js","mappings":"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","sources":["components/SnackBar/index.jsx","pages/Login/index.jsx"],"sourcesContent":["import {Snackbar,Alert} from '@mui/material';\r\n\r\nexport default function ButtonList(props) {\r\n    const vertical='top',horizontal='center';//position param of snack bar\r\n    return (\r\n            <Snackbar open={props.openSnackBar} autoHideDuration={8000} onClose={props.closeSnackBar} anchorOrigin={{vertical , horizontal}}>\r\n                <Alert onClose={props.closeSnackBar} severity={props.severity?\"success\":\"error\"} sx={{ width: '100%' }}>\r\n                    {props.message}\r\n                </Alert>\r\n            </Snackbar> \r\n    );\r\n\r\n}","import './index.css'\r\nimport {useState,createRef} from 'react'\r\nimport store from '../../redux/store'\r\nimport {NavLink, useNavigate} from 'react-router-dom';\r\nimport axios_service from '../../axios_service';\r\nimport {GiSeaDragon} from 'react-icons/gi'\r\nimport {RiUserAddLine} from 'react-icons/ri'\r\nimport  {TiTickOutline} from 'react-icons/ti'\r\nimport {TbExchange} from 'react-icons/tb'\r\nimport { Button } from '@mui/material'\r\nimport SnackBar from '../../components/SnackBar'\r\nimport { addNonce, addPaypalClientID, addUserid, addUserName, changeIsAdmin, changeLoginStatus } from '../../redux/action/security_action';\r\nexport default function Login() {\r\n  let MailRef=createRef()//Ref to email input box\r\n  let PwRef=createRef()//Ref to password input box\r\n  const navigate = useNavigate();\r\n  const[openSnackBar,setOpenSnackBar]=useState(false);//control snack bar\r\n  const[snackBarMessage,setSnackBarMessage]=useState(\"\");//message display in  snack bar\r\n  const[snackBarSeverity,setSnackBarSeverity]=useState(true); //type of snack bar,true for success,false for error\r\n  const checking=(mail,pw)=>{\r\n      let message=\"\";\r\n      // eslint-disable-next-line\r\n      if(!(/^[\\w\\-\\/][\\w\\'\\-\\/\\.]*@[\\w\\-]+(\\.[\\w\\-]+)*(\\.[\\w]{2,6})$/.test(mail))){\r\n          message+=\"mail format incorrect \";\r\n      }\r\n      if(!(/^[a-zA-Z\\d_]{8,20}$/.test(pw))){\r\n          message+=\"password format incorrect \";\r\n      }\r\n      return message\r\n    }\r\n  const closeSnackBar=()=>{\r\n    setOpenSnackBar(false)\r\n  }\r\n  const login=()=>{\r\n      let check_res=checking(MailRef.current.value,PwRef.current.value)\r\n      if(check_res){\r\n          //not pass checking\r\n          setSnackBarSeverity(false)\r\n          setSnackBarMessage(check_res)\r\n          setOpenSnackBar(true)\r\n      }\r\n\r\n\r\n      let form=new FormData();\r\n      form.append('email',MailRef.current.value)\r\n      form.append('pw',PwRef.current.value)\r\n      axios_service.login(form)\r\n      .then(res=>{\r\n        store.dispatch(addNonce(res.data.nonce))\r\n        store.dispatch(addUserid(res.data.userid))\r\n        store.dispatch(addPaypalClientID(res.data.client_id))\r\n        store.dispatch(changeLoginStatus(true))\r\n        store.dispatch(addUserName(MailRef.current.value?.split('@')[0]))\r\n        if(res.data.isAdmin===true){\r\n          store.dispatch(changeIsAdmin(true))\r\n          const first_cid=store.getState().CategoryReducer.CIDList[0]?.CID;\r\n          navigate(`/adminTable?cid=${first_cid}`)\r\n        }else{\r\n          navigate('/home');\r\n        }\r\n      })\r\n      .catch(e=>{\r\n          setSnackBarSeverity(false)\r\n          setSnackBarMessage(e.response?.data)\r\n          setOpenSnackBar(true)\r\n      })\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"Login_container\">\r\n      <div className=\"Login_panel\">\r\n          <h2><GiSeaDragon size={40}/></h2>\r\n          <h2>Login</h2>\r\n          <div>\r\n            <input type=\"text\" placeholder='Email' className=\"Login_inputBox\" ref={MailRef}/>\r\n          </div>\r\n          <div >\r\n            <input type=\"password\"  placeholder='Password' className=\"Login_inputBox\" ref={PwRef}/>\r\n          </div>\r\n          <div>\r\n            <input type=\"checkbox\"></input>\r\n            <span>Remember Me</span>\r\n            <Button variant=\"contained\" color=\"success\" size={\"small\"} className=\"Login_loginBtn\" onClick={login} endIcon={<TiTickOutline/>}>Login</Button>\r\n          </div>\r\n          <div>\r\n            <span>Not yet have account?</span>\r\n            <NavLink to={\"/signup\"}><Button color=\"secondary\" endIcon={<RiUserAddLine/>}>Sign up</Button></NavLink>\r\n          </div>\r\n          <div>\r\n            <NavLink to={\"/changepw\"}><Button color=\"secondary\" endIcon={<TbExchange/>}>Change Password</Button></NavLink>\r\n          </div>\r\n      </div>\r\n      <SnackBar openSnackBar={openSnackBar} closeSnackBar={closeSnackBar} severity={snackBarSeverity} message={snackBarMessage}/>\r\n    </div>\r\n      \r\n  );\r\n}"],"names":["ButtonList","props","open","openSnackBar","autoHideDuration","onClose","closeSnackBar","anchorOrigin","vertical","horizontal","severity","sx","width","message","Login","MailRef","createRef","PwRef","navigate","useNavigate","useState","setOpenSnackBar","snackBarMessage","setSnackBarMessage","snackBarSeverity","setSnackBarSeverity","className","size","type","placeholder","ref","Button","variant","color","onClick","check_res","mail","pw","test","checking","current","value","form","FormData","append","axios_service","then","res","store","addNonce","data","nonce","addUserid","userid","addPaypalClientID","client_id","changeLoginStatus","addUserName","split","isAdmin","changeIsAdmin","first_cid","CategoryReducer","CIDList","CID","catch","e","response","endIcon","to","SnackBar"],"sourceRoot":""}