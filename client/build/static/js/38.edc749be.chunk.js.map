{"version":3,"file":"static/js/38.edc749be.chunk.js","mappings":"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","sources":["components/SnackBar/index.jsx","pages/ChangePW/index.jsx"],"sourcesContent":["import {Snackbar,Alert} from '@mui/material';\r\n\r\nexport default function ButtonList(props) {\r\n    const vertical='top',horizontal='center';//position param of snack bar\r\n    return (\r\n            <Snackbar open={props.openSnackBar} autoHideDuration={8000} onClose={props.closeSnackBar} anchorOrigin={{vertical , horizontal}}>\r\n                <Alert onClose={props.closeSnackBar} severity={props.severity?\"success\":\"error\"} sx={{ width: '100%' }}>\r\n                    {props.message}\r\n                </Alert>\r\n            </Snackbar> \r\n    );\r\n\r\n}","import './index.css'\r\nimport {useState,createRef} from 'react'\r\nimport {useNavigate} from 'react-router-dom';\r\nimport axios_service from '../../axios_service';\r\nimport {GiSeaDragon} from 'react-icons/gi'\r\nimport { Button,Tooltip } from '@mui/material'\r\nimport { TbExchange } from 'react-icons/tb';\r\nimport SnackBar from '../../components/SnackBar'\r\nimport { Logout } from '../../redux/action/security_action';\r\nimport store from '../../redux/store';\r\nexport default function ChangePW() {\r\n    let MailRef=createRef()//Ref to email input box\r\n    let OriginPwRef=createRef()//Ref to password input box\r\n    let NewPwRef=createRef()//Ref to new password input box\r\n    let SecondPwRef=createRef()//Ref to second password input box\r\n    const navigate = useNavigate();\r\n\r\n    const[openSnackBar,setOpenSnackBar]=useState(false);//control snack bar\r\n    const[snackBarMessage,setSnackBarMessage]=useState(\"\");//message display in  snack bar\r\n    const[snackBarSeverity,setSnackBarSeverity]=useState(true); //type of snack bar,true for success,false for error\r\n\r\n    const checking=(mail,originPw,newPw,newSecondPw)=>{\r\n        //perform simple checking before sending request to server\r\n        //not included image->can leave as default while updating an product\r\n        let message=\"\";\r\n\r\n        if(originPw===newPw||originPw===newSecondPw){\r\n            message+=\"old password cannot equal to new password\";\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        if(!(/^[\\w\\-\\/][\\w\\'\\-\\/\\.]*@[\\w\\-]+(\\.[\\w\\-]+)*(\\.[\\w]{2,6})$/.test(mail))){\r\n            message+=\"mail format incorrect \";\r\n        }\r\n        if(!(/^[a-zA-Z\\d_]{8,20}$/.test(originPw))||!(/^[a-zA-Z\\d_]{8,20}$/.test(newPw))||!(/^[a-zA-Z\\d_]{8,20}$/.test(newSecondPw))){\r\n            message+=\"password format incorrect \";\r\n        }\r\n        if(newPw!==newSecondPw){\r\n            message+=\"2 password not match\"\r\n        }\r\n        return message\r\n    }\r\n\r\n    const closeSnackBar=()=>{\r\n        setOpenSnackBar(false)\r\n    }\r\n    const changePW=()=>{\r\n        let check_res=checking(MailRef.current.value,OriginPwRef.current.value,NewPwRef.current.value,SecondPwRef.current.value)\r\n        if(check_res){\r\n            //not pass checking\r\n            setSnackBarSeverity(false)\r\n            setSnackBarMessage(check_res)\r\n            setOpenSnackBar(true)\r\n        }\r\n\r\n        let form=new FormData();\r\n        form.append('email',MailRef.current.value)\r\n        form.append('originPw',OriginPwRef.current.value)\r\n        form.append('newPw',NewPwRef.current.value)\r\n        form.append('newSecondPw',SecondPwRef.current.value)\r\n        axios_service.change_pw(form)\r\n        .then(res=>{\r\n            axios_service.logout()\r\n            .then(res=>{\r\n                store.dispatch(Logout(true))\r\n                navigate('/login');\r\n            }).catch(e=>{\r\n                setSnackBarSeverity(false)\r\n                setSnackBarMessage(e.response?.data)\r\n                setOpenSnackBar(true)\r\n            })\r\n        })\r\n        .catch(e=>{\r\n            setSnackBarSeverity(false)\r\n            setSnackBarMessage(e.response?.data)\r\n            setOpenSnackBar(true)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"ChangePW_container\">\r\n            <div className=\"ChangePW_panel\">\r\n                <h2><GiSeaDragon size={40}/></h2>\r\n                <h2>Change Password</h2>\r\n                <Tooltip title=\"Email\" arrow placement=\"top\">\r\n                    <div>\r\n                        <input type=\"text\" placeholder='Email' className=\"ChangePW_inputBox\" ref={MailRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <Tooltip title=\"Letters and Digits , 8-20 characters\" arrow placement=\"top-end\">\r\n                    <div >\r\n                        <input type=\"password\"  placeholder='Origin Password' className=\"ChangePW_inputBox\" ref={OriginPwRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <Tooltip title=\"Letters and Digits , 8-20 characters\" arrow placement=\"top-end\">\r\n                    <div >\r\n                        <input type=\"password\"  placeholder='New Password' className=\"ChangePW_inputBox\" ref={NewPwRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <Tooltip title=\"Letters and Digits , 8-20 characters\" arrow placement=\"top-end\">\r\n                    <div >\r\n                        <input type=\"password\"  placeholder='Type New Password Again' className=\"ChangePW_inputBox\" ref={SecondPwRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <div>\r\n                    <Button variant=\"contained\" color=\"secondary\" size={\"small\"} className=\"ChangePW_changePWBtn\" onClick={changePW} endIcon={<TbExchange/>}>Change password</Button>\r\n                </div>\r\n            </div>\r\n            <SnackBar openSnackBar={openSnackBar} closeSnackBar={closeSnackBar} severity={snackBarSeverity} message={snackBarMessage}/>\r\n        </div>\r\n        \r\n    );\r\n}"],"names":["ButtonList","props","open","openSnackBar","autoHideDuration","onClose","closeSnackBar","anchorOrigin","vertical","horizontal","severity","sx","width","message","ChangePW","MailRef","createRef","OriginPwRef","NewPwRef","SecondPwRef","navigate","useNavigate","useState","setOpenSnackBar","snackBarMessage","setSnackBarMessage","snackBarSeverity","setSnackBarSeverity","className","size","Tooltip","title","arrow","placement","type","placeholder","ref","Button","variant","color","onClick","check_res","mail","originPw","newPw","newSecondPw","test","checking","current","value","form","FormData","append","axios_service","then","res","store","Logout","catch","e","response","data","endIcon","SnackBar"],"sourceRoot":""}