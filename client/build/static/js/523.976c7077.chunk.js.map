{"version":3,"file":"static/js/523.976c7077.chunk.js","mappings":"sKAEe,SAASA,EAAWC,GAE/B,OACQ,SAAC,IAAQ,CAACC,KAAMD,EAAME,aAAcC,iBAAkB,IAAMC,QAASJ,EAAMK,cAAeC,aAAc,CAACC,SAFlG,MAE6GC,WAF5F,UAEwG,UAC5H,SAAC,IAAK,CAACJ,QAASJ,EAAMK,cAAeI,SAAUT,EAAMS,SAAS,UAAU,QAASC,GAAI,CAAEC,MAAO,QAAS,SAClGX,EAAMY,WAK3B,C,mLCHe,SAASC,IACpB,IAAIC,GAAQC,EAAAA,EAAAA,aACRC,GAAMD,EAAAA,EAAAA,aACNE,GAAYF,EAAAA,EAAAA,aACVG,GAAWC,EAAAA,EAAAA,MAEjB,GAAoCC,EAAAA,EAAAA,WAAS,GAAM,eAA7ClB,EAAY,KAACmB,EAAe,KAClC,GAA0CD,EAAAA,EAAAA,UAAS,IAAG,eAAhDE,EAAe,KAACC,EAAkB,KACxC,GAA4CH,EAAAA,EAAAA,WAAS,GAAK,eAApDI,EAAgB,KAACC,EAAmB,KAkD1C,OACI,iBAAKC,UAAU,mBAAkB,WAC7B,iBAAKA,UAAU,eAAc,WACzB,yBAAI,SAAC,MAAW,CAACC,KAAM,QACvB,wBAAI,aACJ,SAACC,EAAA,EAAO,CAACC,MAAM,QAAQC,OAAK,EAACC,UAAU,MAAK,UACxC,0BACI,kBAAOC,KAAK,OAAOC,YAAY,QAAQP,UAAU,kBAAkBQ,IAAKpB,SAGhF,SAACc,EAAA,EAAO,CAACC,MAAM,uCAAuCC,OAAK,EAACC,UAAU,UAAS,UAC3E,0BACI,kBAAOC,KAAK,WAAYC,YAAY,WAAWP,UAAU,kBAAkBQ,IAAKlB,SAGxF,SAACY,EAAA,EAAO,CAACC,MAAM,uCAAuCC,OAAK,EAACC,UAAU,UAAS,UAC3E,0BACI,kBAAOC,KAAK,WAAYC,YAAY,sBAAsBP,UAAU,kBAAkBQ,IAAKjB,SAGnG,0BACI,SAACkB,EAAA,EAAM,CAACC,QAAQ,YAAYC,MAAM,YAAYV,KAAM,QAASD,UAAU,mBAAmBY,QAjD7F,WACT,IAAIC,EArBO,SAACC,EAAKC,EAAGC,GAGpB,IAAI9B,EAAQ,GAWZ,MATK,2DAA2D+B,KAAKH,KACjE5B,GAAS,0BAER,sBAAsB+B,KAAKF,KAC5B7B,GAAS,8BAEV6B,IAAKC,IACJ9B,GAAS,wBAENA,CACX,CAMkBgC,CAAS9B,EAAQ+B,QAAQC,MAAM9B,EAAM6B,QAAQC,MAAM7B,EAAY4B,QAAQC,OAClFP,IAECd,GAAoB,GACpBF,EAAmBgB,GACnBlB,GAAgB,IAGpB,IAAI0B,EAAK,IAAIC,SACbD,EAAKE,OAAO,QAAQnC,EAAQ+B,QAAQC,OACpCC,EAAKE,OAAO,KAAKjC,EAAM6B,QAAQC,OAC/BI,EAAAA,EAAAA,OAAqBH,GACpBI,MAAK,SAAAC,GACF3B,GAAoB,GACpBF,EAAmB6B,EAAIC,MACvBhC,GAAgB,GAChBH,EAAS,SACb,IACCoC,OAAM,SAAAC,GACH9B,GAAoB,GACpBF,EAAmBgC,EAAEC,SAASH,MAC9BhC,GAAgB,EACpB,GACJ,EAyB2HoC,SAAS,SAAC,MAAa,IAAG,SAAC,iBAG9I,SAACC,EAAA,EAAQ,CAACxD,aAAcA,EAAcG,cAvD1B,WAChBgB,GAAgB,EACpB,EAqD4EZ,SAAUe,EAAkBZ,QAASU,MAIrH,C","sources":["components/SnackBar/index.jsx","pages/SignUp/index.jsx"],"sourcesContent":["import {Snackbar,Alert} from '@mui/material';\r\n\r\nexport default function ButtonList(props) {\r\n    const vertical='top',horizontal='center';//position param of snack bar\r\n    return (\r\n            <Snackbar open={props.openSnackBar} autoHideDuration={8000} onClose={props.closeSnackBar} anchorOrigin={{vertical , horizontal}}>\r\n                <Alert onClose={props.closeSnackBar} severity={props.severity?\"success\":\"error\"} sx={{ width: '100%' }}>\r\n                    {props.message}\r\n                </Alert>\r\n            </Snackbar> \r\n    );\r\n\r\n}","import './index.css'\r\nimport {useState,createRef} from 'react'\r\nimport store from '../../redux/store'\r\nimport {useNavigate} from 'react-router-dom';\r\nimport axios_service from '../../axios_service';\r\nimport {GiSeaDragon} from 'react-icons/gi'\r\nimport {RiUserAddLine} from 'react-icons/ri'\r\nimport { Button,Tooltip } from '@mui/material'\r\nimport SnackBar from '../../components/SnackBar'\r\nexport default function SignUp() {\r\n    let MailRef=createRef()//Ref to email input box\r\n    let PwRef=createRef()//Ref to password input box\r\n    let SecondPwRef=createRef()//Ref to password input box\r\n    const navigate = useNavigate();\r\n\r\n    const[openSnackBar,setOpenSnackBar]=useState(false);//control snack bar\r\n    const[snackBarMessage,setSnackBarMessage]=useState(\"\");//message display in  snack bar\r\n    const[snackBarSeverity,setSnackBarSeverity]=useState(true); //type of snack bar,true for success,false for error\r\n\r\n    const checking=(mail,pw,secondPw)=>{\r\n        //perform simple checking before sending request to server\r\n        //not included image->can leave as default while updating an product\r\n        let message=\"\";\r\n        // eslint-disable-next-line\r\n        if(!(/^[\\w\\-\\/][\\w\\'\\-\\/\\.]*@[\\w\\-]+(\\.[\\w\\-]+)*(\\.[\\w]{2,6})$/.test(mail))){\r\n            message+=\"mail format incorrect \";\r\n        }\r\n        if(!(/^[a-zA-Z\\d_]{8,20}$/.test(pw))){\r\n            message+=\"password format incorrect \";\r\n        }\r\n        if(pw!==secondPw){\r\n            message+=\"2 password not match\"\r\n        }\r\n        return message\r\n    }\r\n\r\n    const closeSnackBar=()=>{\r\n        setOpenSnackBar(false)\r\n    }\r\n    const signUp=()=>{\r\n        let check_res=checking(MailRef.current.value,PwRef.current.value,SecondPwRef.current.value)\r\n        if(check_res){\r\n            //not pass checking\r\n            setSnackBarSeverity(false)\r\n            setSnackBarMessage(check_res)\r\n            setOpenSnackBar(true)\r\n        }\r\n\r\n        let form=new FormData();\r\n        form.append('email',MailRef.current.value)\r\n        form.append('pw',PwRef.current.value)\r\n        axios_service.signup(form)\r\n        .then(res=>{\r\n            setSnackBarSeverity(true)\r\n            setSnackBarMessage(res.data)\r\n            setOpenSnackBar(true)\r\n            navigate('/login');\r\n        })\r\n        .catch(e=>{\r\n            setSnackBarSeverity(false)\r\n            setSnackBarMessage(e.response.data)\r\n            setOpenSnackBar(true)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"SignUp_container\">\r\n            <div className=\"SignUp_panel\">\r\n                <h2><GiSeaDragon size={40}/></h2>\r\n                <h2>Sign Up</h2>\r\n                <Tooltip title=\"Email\" arrow placement=\"top\">\r\n                    <div>\r\n                        <input type=\"text\" placeholder='Email' className=\"SignUp_inputBox\" ref={MailRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <Tooltip title=\"Letters and Digits , 8-20 characters\" arrow placement=\"top-end\">\r\n                    <div >\r\n                        <input type=\"password\"  placeholder='Password' className=\"SignUp_inputBox\" ref={PwRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <Tooltip title=\"Letters and Digits , 8-20 characters\" arrow placement=\"top-end\">\r\n                    <div >\r\n                        <input type=\"password\"  placeholder='Type Password Again' className=\"SignUp_inputBox\" ref={SecondPwRef}/>\r\n                    </div>\r\n                </Tooltip>\r\n                <div>\r\n                    <Button variant=\"contained\" color=\"secondary\" size={\"small\"} className=\"SignUp_signUpBtn\" onClick={signUp} endIcon={<RiUserAddLine/>}>SignUp</Button>\r\n                </div>\r\n            </div>\r\n            <SnackBar openSnackBar={openSnackBar} closeSnackBar={closeSnackBar} severity={snackBarSeverity} message={snackBarMessage}/>\r\n        </div>\r\n        \r\n    );\r\n}"],"names":["ButtonList","props","open","openSnackBar","autoHideDuration","onClose","closeSnackBar","anchorOrigin","vertical","horizontal","severity","sx","width","message","SignUp","MailRef","createRef","PwRef","SecondPwRef","navigate","useNavigate","useState","setOpenSnackBar","snackBarMessage","setSnackBarMessage","snackBarSeverity","setSnackBarSeverity","className","size","Tooltip","title","arrow","placement","type","placeholder","ref","Button","variant","color","onClick","check_res","mail","pw","secondPw","test","checking","current","value","form","FormData","append","axios_service","then","res","data","catch","e","response","endIcon","SnackBar"],"sourceRoot":""}